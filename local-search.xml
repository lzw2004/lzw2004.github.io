<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CTF_第四节-PHP的基础知识</title>
    <link href="/2024/05/28/4/"/>
    <url>/2024/05/28/4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、PHP的基础概念"><a href="#一、PHP的基础概念" class="headerlink" title="一、PHP的基础概念"></a>一、PHP的基础概念</h1><p><a href="https://php.github.net.cn/download-docs.php">php手册</a></p><p>PHP是一&#x3D;一种脚本语言，和我们的Python类似，不过他是仅运行在服务器上的，通过 <strong>URL</strong> 访问后来解释执行。</p><p>我们执行Python脚本的时候，是使用 <strong>python githack.py</strong> 这种形式。</p><p>而我们需要执行PHP的时候，是直接访问 <a href="http://www.xxx.com/index.php">http://www.xxx.com/index.php</a><br>访问后，服务器上会解释执行 index.php 这个文件，然后执行的结果返回给我们的浏览器</p><p>PHP由于简单易学、部署简单、快速开发、多平台兼容的特性，很快就脱颖而出，成为众多 小众网站的首选语言，因为PHP够小、够简单、，甚至单人就可以开发出一套完整的网站系统，不像Java那样笨重。<br>适合中小型企业网站的开发。</p><p>总结：PHP是网站的一种脚本语言，文件名是 .php ,是用来写网站的，适合中小型网站的开发。</p><h1 id="二、PHP环境的安装"><a href="#二、PHP环境的安装" class="headerlink" title="二、PHP环境的安装"></a>二、PHP环境的安装</h1><h2 id="php运行环境"><a href="#php运行环境" class="headerlink" title="php运行环境"></a>php运行环境</h2><p>所谓的 php 运行环境，其实就是和我们 Python 的环境一样，不过我们这里选择一个集成的运行环境</p><p>下载完，打开之后，是这样的</p><img src="/2024/05/28/4/1.png" class=""><p>在 <strong>“网站”</strong> 里边可以设置网站根目录</p><img src="/2024/05/28/4/2.png" class=""><p>到这php运行环境就搭建完成了</p><h2 id="php开发环境"><a href="#php开发环境" class="headerlink" title="php开发环境"></a>php开发环境</h2><p>这里推荐 <strong>VSCode</strong> 因为简单易用，功能强大，插件市场好</p><img src="/2024/05/28/4/3.png" class=""><p>还有一个可以用 <strong>PhpStorm</strong> 但是吧，<strong>收费</strong></p><img src="/2024/05/28/4/4.png" class=""><p>这个就是自行选择</p><h1 id="PHP的基础语法"><a href="#PHP的基础语法" class="headerlink" title="PHP的基础语法"></a>PHP的基础语法</h1><h2 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h2><p>在 url 后边直接加入参数比如 ?a&#x3D;b 这就是 get 型数据提交，那么在 php 代码中，是如何接收这个参数和值的呢？</p><p>新建一个 php 文件 写入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器运行后会发现</p><img src="/2024/05/28/4/5.png" class=""><p>我们进行了传参 a&#x3D;asd<br>返回的结果就是我们刚刚传递的参数</p><p>换一个思想，试一下上传系统命令呢？<br>那我们就要知道PHP里边能执行系统命令的函数，这里使用 <strong>system()</strong><br>修改代码为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>继续传参，这里修改值为 <strong>“systeminfo”</strong>（查看系统信息）<br>因为我的php环境是在Windows做的，所有命令就是windows的Dos命令</p><img src="/2024/05/28/4/6.png" class=""><p>这里乱码的原因是因为编码问题</p><h2 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h2><p>跟 <strong>$_GET</strong> 相类似，但是区别在于， <strong>$_GET</strong> 传参是直接在URL里边明文传参，但是 <strong>$_POST</strong> 传参的时候在 URL 里边是看不见明文的<br>在 URL 里直接传参也是不可以的<br>但是我们利用 Buro抓包- -&gt; 重发 来修改参数<br>从而获取敏感信息</p><pre><code class="hljs">（以上为个人理解）</code></pre><h2 id="认识函数"><a href="#认识函数" class="headerlink" title="认识函数"></a>认识函数</h2><p>php的函数是一个功能标签<br>函数的功能就是想浏览器输出后面引号中的内容。<br>php的函数基本语法是 <strong>函数名(函数参数);</strong><br>函数可以有0个或者多个参数，如果没有参数，就不写<br>php中的函数，有自带的系统函数，也有用户的自定义函数<br>比如我们常用的系统函数，phpinfo，它会显示当前服务器的php基本信息，不如版本、各项设置等</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p><strong>function 函数名(参数){<br>    函数体;<br>};</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>;<br>&#125;;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br><span class="hljs-variable">$e</span> = <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>;<br><br><br></code></pre></td></tr></table></figure><h2 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h2><p>比较危险的函数，顾名思义，就是如果用户的参数可控，会造成灾难性后果<br>比如PHP终于有一个 <strong>system</strong> 函数</p><img src="/2024/05/28/4/7.png" class=""><h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><p>PHP 基础基本上就这些了，遇到不懂的函数，就要看<a href="https://php.github.net.cn/download-docs.php">手册</a></p>]]></content>
    
    
    <categories>
      
      <category>课堂笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
      <tag>信息安全</tag>
      
      <tag>网络安全</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF_第三节-Burp suite</title>
    <link href="/2024/05/27/3/"/>
    <url>/2024/05/27/3/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Burpsuite"><a href="#什么是Burpsuite" class="headerlink" title="什么是Burpsuite"></a>什么是Burpsuite</h1><h2 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h2><p>BurpSuite是一个软件，就是我们常说的bp，bp最主要的功能是对http包可以进行拦截分析重新发包、以及按照规则批量发包。</p><br><h1 id="如何安装BurpSuite"><a href="#如何安装BurpSuite" class="headerlink" title="如何安装BurpSuite"></a>如何安装BurpSuite</h1><p> bp是基于java环境的，安装bp之前，要配置好java环境，同时，由于bp分为两个版本<br>一个是社区版、一个是专业版<br>社区版免费使用，但是某些高级功能受限，同时对性能也有限制，专业版是收费使用，功能非常强大，性能比社区版要高。</p><p> 这个引用一下 CSDN 一位大佬的链接</p><p> <a href="https://blog.csdn.net/m0_63100066/article/details/128355365">BurpSuite v2.1（含中文版）的保姆级安装与使用</a></p><br><h1 id="使用BurpSuite进行抓包"><a href="#使用BurpSuite进行抓包" class="headerlink" title="使用BurpSuite进行抓包"></a>使用BurpSuite进行抓包</h1><p>浏览器选择开启代理转发</p><img src="/2024/05/27/3/1.png" class=""><p>burp设置一下代理，并开启</p><img src="/2024/05/27/3/2.png" class=""><img src="/2024/05/27/3/3.png" class=""><p>刷新网页会发现，burp的代理页面会出现新的内容</p><img src="/2024/05/27/3/4.png" class=""><br><h1 id="使用BurpSuite进行爆破"><a href="#使用BurpSuite进行爆破" class="headerlink" title="使用BurpSuite进行爆破"></a>使用BurpSuite进行爆破</h1><h2 id="什么是爆破"><a href="#什么是爆破" class="headerlink" title="什么是爆破"></a>什么是爆破</h2><p>爆破其实就是试，如果存在下面的逻辑，就能爆破<br>比如，登录逻辑中，只要没有验证码，我们可以无限次尝试的情况下，是有率试出来正确的用户名密码的。<br>所以爆破的关键，就是能够 <strong>多次尝试</strong>，所以应对爆破的方法也很简单，就是防止多次尝试。</p><p>常见的有</p><ul><li>图形验证码</li><li>手机短信验证码</li><li>无感验证码</li><li>等等</li></ul><p>也就是说，如果存在一个逻辑，可以接收一个参数，并且判断这个参数对不对，如果不限制次数的情况下，我们可以试出来这个参数的值。</p><br><h2 id="爆破单个参数"><a href="#爆破单个参数" class="headerlink" title="爆破单个参数"></a>爆破单个参数</h2><p>依旧是先抓包，然后发送到 攻击</p><img src="/2024/05/27/3/5.png" class=""><p>添加一个 Payload 点</p><img src="/2024/05/27/3/6.png" class=""><p>1、选择payload<br>2、选择数值（因为我演示的，是 get 方式提交一个3位数数字获得flag）<br>3、设置数值的范围<br>4、直接开始攻击</p><img src="/2024/05/27/3/7.png" class=""><p>发现有一个返回长度不一样的数据包，这就是爆破出来的数值</p><img src="/2024/05/27/3/8.png" class=""><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">但是，我们要对爆破有个清醒的认识，特别是对需要爆破的时间，我们举个例子<br><span class="hljs-number">4</span>位数字，我们需要爆破<span class="hljs-number">10000</span>次，也就是<span class="hljs-number">1</span>万次<br><span class="hljs-number">5</span>位数字，我们需要爆破<span class="hljs-number">100000</span>次，也就是<span class="hljs-number">10</span>万次<br><span class="hljs-number">6</span>位数字，我们需要爆破<span class="hljs-number">1000000</span>次，也就是<span class="hljs-number">100</span>万次<br><span class="hljs-number">6</span>位字符，我们需要爆破<span class="hljs-number">735091890625</span>次，也就是大约<span class="hljs-number">7350</span>亿次<span class="hljs-number">8</span>位字符，我们需要爆破<span class="hljs-number">6634204312890600</span>次，大约<span class="hljs-number">6634</span>万亿次I<br>如果我们一秒爆破<span class="hljs-number">10</span>次，大约需要<span class="hljs-number">7678477213</span>年，也就是<span class="hljs-number">76</span>亿年，而地球诞生才<span class="hljs-number">45</span>亿年<br>所以，大家要对爆破有个直观的认识，要能在可接受的有限次数内出结果，而不是有理论上的可能就爆破<br>总结:不到万不得已不爆破。<br></code></pre></td></tr></table></figure><br><h2 id="爆破用户名和密码"><a href="#爆破用户名和密码" class="headerlink" title="爆破用户名和密码"></a>爆破用户名和密码</h2><p>这个跟爆破单个参数类似，只是需要设置两个参数，要注意多的是，要把攻击类型改到第三个</p><img src="/2024/05/27/3/9.png" class=""><p>payload也要挨个设置（这里的 1,2 是你设置Payload点，1&#x3D;username 2&#x3D;password）</p><img src="/2024/05/27/3/10.png" class=""><br><h2 id="爆破http认证"><a href="#爆破http认证" class="headerlink" title="爆破http认证"></a>爆破http认证</h2><p>所谓http认证，就是通过服务端发回一个标志，告诉浏览器，这个页面需要输入用户名和密码才能访问浏览器会自动弹出一个输入框，让输入用户名密码，如果正确则继续访问，如果错误则报401未授权。</p><p>跟爆破 <strong>用户名和密码</strong> 没有什么大区别，只是 <strong>Payload</strong> 点不同</p><img src="/2024/05/27/3/11.png" class=""><p><strong>Payload</strong> 设置为</p><img src="/2024/05/27/3/12.png" class=""><p>如果 <strong>Payload</strong> 使用了 <strong>Base64</strong> 编码时，要注意的是，要把这里的选项 <strong>取消勾选</strong>，由于是 <strong>Base6</strong> 有的时候会在 Payload 后边默认加上 “&#x3D;”</p><img src="/2024/05/27/3/13.png" class="">]]></content>
    
    
    <categories>
      
      <category>课堂笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
      <tag>信息安全</tag>
      
      <tag>网络安全</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2024/05/26/regular/"/>
    <url>/2024/05/26/regular/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式，可以简单理解为快速匹配字符，当然啊它不仅能匹配，还可以利用编程（Python、PHP等语言）函数 删除、修改等操作。</p><p>正则表达式不仅仅在网络安全领域很常用，在其他领域也尝尝能见到它的身影，如Python爬虫利用正则表达式来提取标签，PHP利用正则表达式来过滤非法请求等</p><h2 id="表示字符"><a href="#表示字符" class="headerlink" title="表示字符"></a>表示字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配任意一个字符</td></tr><tr><td>[]</td><td>匹配范围里面的字符</td></tr><tr><td>\d</td><td>匹配0-9数字</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\s</td><td>匹配空白字符 空格 tab键</td></tr><tr><td>\S</td><td>匹配非空白字符</td></tr><tr><td>\w</td><td>匹配单词字符 a-z A-Z 0-9</td></tr><tr><td>\W</td><td>匹配非单词字符</td></tr></tbody></table><h2 id="数量表示"><a href="#数量表示" class="headerlink" title="数量表示"></a>数量表示</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个字符出现的次数,可以表示无数次 次数 可有可无</td></tr><tr><td>+</td><td>匹配前一个字符出现的1次或无数次，至少有一次</td></tr><tr><td>?</td><td>配前一个字符出现的次数,可有可无</td></tr><tr><td>{x}</td><td>表示前面的字符出现x次</td></tr><tr><td>{x,}</td><td>匹配前一个字符最少出现x次</td></tr><tr><td>{x,m}</td><td>匹配前一个字符出现次数为x到m次</td></tr></tbody></table><h2 id="位置表示"><a href="#位置表示" class="headerlink" title="位置表示"></a>位置表示</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>表示字符串开头</td></tr><tr><td>$</td><td>表示字符串结尾</td></tr><tr><td>\b</td><td>表示一个单词边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table><h2 id="贪婪模式："><a href="#贪婪模式：" class="headerlink" title="贪婪模式："></a>贪婪模式：</h2><p>尽可能匹配多的信息</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>.*</td><td>贪婪模式</td></tr><tr><td>.*?</td><td>取消贪婪</td></tr></tbody></table><br><h2 id="例子-邮箱"><a href="#例子-邮箱" class="headerlink" title="例子-邮箱"></a>例子-邮箱</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">\w+<span class="hljs-comment">([-+.]\w+)</span>*@\w+<span class="hljs-comment">([-.]\w+)</span>*\.\w+<span class="hljs-comment">([-.]\w+)</span>*<br></code></pre></td></tr></table></figure><p>这个正则表达式用于匹配电子邮件地址。下面是对这个正则表达式的详细解释：</p><ul><li><p><code>\w+</code>：匹配一个或多个字母、数字或下划线字符。这部分对应电子邮件地址的用户名部分。</p></li><li><p><code>([-+.]\w+)*</code>：这是一个可选的组，匹配零次或多次以下模式：</p><ul><li><code>[-+.]</code>：匹配连字符、加号或点号。这些字符可以在电子邮件用户名中出现。</li><li><code>\w+</code>：再次匹配一个或多个字母、数字或下划线字符。</li></ul><p>  这个组允许用户名中包含这些特殊字符，但这部分是可选的。  </p></li><li><p><code>@</code>：匹配电子邮件地址中的“@”符号，这是必需的。</p></li><li><p><code>\w+</code>：匹配电子邮件地址中的域名部分的第一个单词，同样是一个或多个字母、数字或下划线字符。</p></li><li><p><code>([-.]\w+)*</code>：这是一个可选的组，匹配零次或多次以下模式：</p><ul><li><code>[-.]</code>：匹配连字符或点号。这些字符可以出现在域名中。</li><li><code>\w+</code>：匹配一个或多个字母、数字或下划线字符。</li></ul><p>  这个组允许域名中包含这些特殊字符，并且可以出现多次，但这部分是可选的。  </p></li><li><p><code>\.</code>：匹配电子邮件地址中的点号（.），用于分隔域名和顶级域。</p></li><li><p><code>\w+</code>：匹配电子邮件地址的顶级域，这是一个或多个字母、数字或下划线字符。</p></li><li><p><code>([-.]\w+)*</code>：与前面的 <code>([-.]\w+)*</code> 相同，但这次它匹配顶级域名中可能出现的额外部分，如 “.co.uk” 中的 “.uk”。</p></li></ul><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">总的来说，这个正则表达式匹配一个基础的电子邮件地址格式，同时允许在用户名和域名中包含一些特殊字符，并且可以匹配带有多个部分的顶级域名。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
      <tag>信息安全</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF_第二节-漏洞利用之信息泄露</title>
    <link href="/2024/05/25/2/"/>
    <url>/2024/05/25/2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、信息泄露类型"><a href="#一、信息泄露类型" class="headerlink" title="一、信息泄露类型"></a>一、信息泄露类型</h2><p>文件泄露, 根据泄漏的信息敏感程度，在WEB漏洞中可以算是中危甚至高危的漏洞，本篇文章就来介绍下一些常见的泄漏，主要分为由版本管理软件导致的泄露，文件包含导致的泄露和配置错误导致的泄露。</p><img src="/2024/05/25/2/liucheng.png" class=""><br><p>上面的只是前人总结出来的突破点，需要灵活运用，不能过于呆板，比如这个敏感文件泄露。访问<a href="http://xxx/www.zip">http://xxx/www.zip</a> 404怎么办?404就是此路不通，需要重新找思路。<br>我们的目的，不是秀操作，而是真真实实拿到我们需要的敏感文件，至于从哪个方式、哪个路径拿到，其实不重要的，不管黑猫白猫抓住老鼠就是好猫。<br>上面的图，只是告诉大家有这些可能，但是不一定信息泄露就一定在上面的这几种情况之中。</p><br><h2 id="二、信息泄露漏洞利用"><a href="#二、信息泄露漏洞利用" class="headerlink" title="二、信息泄露漏洞利用"></a>二、信息泄露漏洞利用</h2><h3 id="1、http头信息泄露"><a href="#1、http头信息泄露" class="headerlink" title="1、http头信息泄露"></a>1、http头信息泄露</h3><p>这里我们需要区别下 <strong>&#x2F;admin&#x2F;</strong> 和 <strong>&#x2F;admin</strong> 的区别，虽然两者只相差一个斜杠，但是访问的是不同的文件 <strong>&#x2F;admin&#x2F; 表示访问的是admin目录，会默认访问目录里面的索引文件，比如index.html或者index.php表示访问admin文件，如果没有这个文件，就直接返回404，不会去寻找索引文件</strong><br>有些情况下加不加斜杠都能访问到 <strong>&#x2F;admin&#x2F;</strong> ，是因为配置文件里面进行了设置，这里我们后面会讲</p><p>这里还要区别的是路由，目前网站主流都是基于路由的，比如<br>这里则表示访问的是 <strong>&#x2F;user路由，而不是访问user这个文件，需要根据server头来推断，比如php、asp、&#x2F;userjsp、aspx、html、shtml这些后缀，是基于文件的。<br>而那些看起来没有后缀，或者像&#x2F;user&#x2F;loginusername&#x3D;admin&amp;password&#x3D;123这种形式，则是基于路由的，这个需要多次判断。</strong></p><ul><li>200 表示正常</li><li>301  302 表示跳转</li><li>404 表示文件不存在</li><li>500 表示服务器内部错误</li><li>502 表示转发失败 error gatwary</li></ul><h3 id="2、报错信息泄露"><a href="#2、报错信息泄露" class="headerlink" title="2、报错信息泄露"></a>2、报错信息泄露</h3><h3 id="3、页面信息泄露"><a href="#3、页面信息泄露" class="headerlink" title="3、页面信息泄露"></a>3、页面信息泄露</h3><h3 id="4、robots-txt-文件泄露"><a href="#4、robots-txt-文件泄露" class="headerlink" title="4、robots.txt 文件泄露"></a>4、robots.txt 文件泄露</h3><p>robots.bxt又称为机器人协议、爬虫协议，主要面向互联网的爬虫，规定哪些内容可以收录哪些内容不能收录，属于防君子不防小人的东西，没有任何强制约束力。一般自诩为正规的搜索引擎爬虫，都会遵守协议，但仍有某些引擎直接无视。</p><h3 id="5、-git文件泄露"><a href="#5、-git文件泄露" class="headerlink" title="5、.git文件泄露"></a>5、.git文件泄露</h3><p>什么是 <strong>.git</strong> 文件泄露<br><strong>.git</strong> 是一个版本控制系统</p><p><strong>问题的所在</strong></p><ul><li><p>这里的问题就是，多个开发不能并行开发，只能串联开发。也就是开发者张三如果功能没有开发完毕，并提交到服务器之前，开发者李四是没有办法下载最终版本的文件到自己机器上再进一步增加功能的。造成的结果，就是堵塞和低效。</p></li><li><p>堵塞就是只要有1个人的功能没做完，后面的所有功能都必须暂停，不能开发。低效就是代码不能同时开始，只能一个功能一个功能开发，如果有3个开发人员，那么总会有2个人没事干，在摸鱼，老板白白浪费工资，所以老板很生气。如果项目增大到需要20个开发人员，则会经常有19个开发人员在摸鱼相当于4核CPU轮流处理事务，那么没有轮到的CPU，就资源浪费了。老板更希望是4核CPU同时工作，而不是轮流工作。</p></li><li><p>本来这样也挺好的，1个人的活，有3个人干，但是好景不长，有老板发现了这个问题，并开发了一个软件，专门解决这个问题，这个软件就是版本控制系统。</p></li></ul><p>于是，利用工具应运而生，专门解析提交记录，来获取提交的文件内容。<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p><strong>GitHack</strong> 是一个.git泄露利用脚本，通过泄露的,git文件夹下的文件，重建还原工程源代码。</p><p>渗透测试人员、攻击者，可以进一步审计代码，挖掘:文件上传，SQL注射等web安全洞。</p><p>利用工具的原理</p><ul><li>解析 <strong>.git&#x2F;index</strong> 文件，找到工程中所有的:(文件名，文件sha1) 去 <strong>.git&#x2F;objects&#x2F;</strong> 文件夹下下载对应的文件<br>zlib解压文件，按原始的目录结构写入源代码</li></ul><h3 id="6、搜索引擎收录泄露"><a href="#6、搜索引擎收录泄露" class="headerlink" title="6、搜索引擎收录泄露"></a>6、搜索引擎收录泄露</h3><img src="/2024/05/25/2/intitle.png" class=""><h3 id="7、fofa资产泄露"><a href="#7、fofa资产泄露" class="headerlink" title="7、fofa资产泄露"></a>7、fofa资产泄露</h3><img src="/2024/05/25/2/fofa.png" class=""><h2 id="三、信息泄露总结"><a href="#三、信息泄露总结" class="headerlink" title="三、信息泄露总结"></a>三、信息泄露总结</h2><p><strong>招无定式 水无常形</strong><br>不要拘泥于上面的几种情况，在渗透实战中会有其他更多的姿势。但是目的都是一样的：<br><strong>尽一切可能多收集对面的信息，收集的越多越好。</strong></p><p>在CTF比赛中，信息泄露考点难度普遍较低，不会隐藏特别深，一般有以下几种</p><ul><li>1.<em><strong>robots.txt</strong></em> 泄露(里面有可疑路径或者敏感文件名称)</li><li>2.<em><strong>git&#x2F;svn</strong></em> 泄露(访问.git或者.svn目录出现403)</li><li>3.<em><strong>页面注释泄露</strong></em>(右键查看源代码)、http头泄露(类似百度的 <strong>BWS&#x2F;1.1</strong> )</li><li>4.<em><strong>任意文件下载</strong></em> 造成的信息泄露(可以下载 <strong>WEB-INF</strong> 文件夹里内容)</li><li>5.<em><strong>开源社区信息泄露</strong></em> ，例如:泄露出项目名称，而整个项目代码可以在 <strong>github</strong>、<strong>gitee</strong> 等找到</li><li>6.<em><strong>使用vim异常退出</strong></em>，可能存在类似 <strong>.index.php.swp</strong> 临时文件</li></ul><p>还有一部分比较冷门的信息泄露，比如 <strong>.DS_Store泄露</strong>、<strong>nginx错误配置</strong> 导致的文件泄露，因为利用效果有限或者不具有通用性，这里不再深入讲解。</p>]]></content>
    
    
    <categories>
      
      <category>课堂笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
      <tag>信息安全</tag>
      
      <tag>网络安全</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF_第一节-认识漏洞</title>
    <link href="/2024/05/25/1/"/>
    <url>/2024/05/25/1/</url>
    
    <content type="html"><![CDATA[<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><ul><li><strong>flag</strong>  答案有一个固定格式的字符串组成</li><li><strong>poc</strong>  漏洞演示，一般不具有攻击性，可以直接进行漏洞利用，执行命令货读取文件</li><li><strong>exp</strong>  漏洞利用脚本、工具，具有攻击性，可以直接进行漏洞利用，执行命令或者读取文件</li><li><strong>脚本</strong>  利用漏洞需要执行的本地“程序”，方便漏洞利用代替重复的手工操作</li></ul><h2 id="一、什么是漏洞"><a href="#一、什么是漏洞" class="headerlink" title="一、什么是漏洞"></a>一、什么是漏洞</h2><p>无论是安全渗透，还是CTF，本质上都是对现在有信息资产的非预期使用，用户通过技术手段，访问或者修改到本不应该<br>访问到的数据，执行不应执行的代码。</p><br><h2 id="二、漏洞的产生原因"><a href="#二、漏洞的产生原因" class="headerlink" title="二、漏洞的产生原因"></a>二、漏洞的产生原因</h2><p>漏洞的产生原因，是由多方面造成，例如 ·</p><ul><li><p><strong>设计缺陷</strong> ：例如某开发团队在设计在线商城的时候，没有考虑到用户订单中商品购买数量为负数情况，造成用户订单 金额为负数，商户资金损失。 </p></li><li><p><strong>逻辑错误</strong>：例如密码找回时，没有验证用户名是否是他人用户名，造成找回了他人的密码 </p></li><li><p><strong>代码bug</strong>：由于对用户的输入没有进行过滤或者其他没有想到的情况，造成业务非正常执行。例如路由器中有个ping 命令来检测网络是否连通，但是对参数没有过滤，造成了既能执行ping命令，又执行了其他命令，服务器被攻陷 </p></li><li><p><strong>越权漏洞</strong>：本来没有权限进行的行为，被恶意绕过，可以进行。比如弱口令登录后台、xss获取管理员session、普通用 户修改管理员用户的密码、管理员把不应该放到公网上的数据放上去，被恶意攻击者发现并下载，也属于越权漏洞， 经典的例如<strong><a href="http://www.zip/">www.zip</a></strong>源码泄露</p></li><li><p><strong>其他漏洞</strong>：不属于上面的类型的漏洞</p></li></ul><br><h2 id="三、漏洞的利用方式"><a href="#三、漏洞的利用方式" class="headerlink" title="三、漏洞的利用方式"></a>三、漏洞的利用方式</h2><ul><li><strong>失能</strong><ul><li>服务宕机</li></ul></li><li><strong>读取</strong><ul><li>读敏感文件</li><li>读数据库信息</li></ul></li><li><strong>写入</strong><ul><li>数据篡改</li><li>提权</li><li>加密硬盘</li></ul></li><li><strong>执行</strong><ul><li>执行命令</li><li>内网渗透</li><li>反弹shell</li></ul></li></ul><p>漏洞利用时，一般分为四种方式，分别是</p><h3 id="失能"><a href="#失能" class="headerlink" title="失能"></a>失能</h3><p>低级危害的利用方式，损人不利己，仅仅是让对方资产暂时失去服务功能，一般不会有其他的损失。<br>更偏向对对方的名誉及形象进行破坏，技术上损失小，无形资产损失大。</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>中级危害的利用方式，能够读取目标资产中的敏感数据，如数据库敏感信息，密码、不对外的文档文本等等</p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>高级危害的利用方式，不仅能够读取目标中的敏感数据，还可以通过写入数据来篡改目标数据、修改目标的对外页面例如当年著名的伊朗网军攻陷百度事件，百度首页内容惨遭篡改，舆论一片哗然。这种漏洞利用危害性、影响性巨大属于高危漏洞。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>最高级别危害的利用方式，可以在目标资产上执行任意命令，完全控制目标资产，控制内部其他资产，不仅对数据洗劫一空，甚至可以操作目标指令，造成巨大损失。例如震网木马，通过攻陷伊朗核浓缩主机，伪造核心数据，并向离心机下达超负荷运行参数，造成离心机彻底损坏，伊朗核设施被迫中断的严重事故。</p><br><h2 id="四、Web题目的做题思路"><a href="#四、Web题目的做题思路" class="headerlink" title="四、Web题目的做题思路"></a>四、Web题目的做题思路</h2><p>在 <strong>CTF</strong> 夺旗赛中，目标就是读取敏感信息，也就是fag字符串，这个字符串可能会存在目标主机的某个文件中，也可能存在<br>数据库中，也可能存在于某些高权限、内网的其他位置。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>所以拿到题目后，第一件事情就是要判断，判断利用的漏洞方式为<em><strong>读取、写入、还是执行</strong></em>。</p><p>具体怎么判断，并不能马上确定，我们就从低到高，依次挖掘，<br>即<em><strong>先找文件读取、再找文件写入、再找命令执行</strong></em>。<br>这一步先大概确定出最终要拿到的权限，确定渗透方向。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>判断漏洞大概的类型，或者题目大概的考点，比如，有登录逻辑，就尝试sql注入，有下载逻辑就尝试文件读取，给了源码就做代码审计等等。<br>这一步确定具体的利用思路，实现漏洞利用。</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>寻找敏感数据，拿到 <strong>flag</strong></p>]]></content>
    
    
    <categories>
      
      <category>课堂笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课堂笔记</tag>
      
      <tag>信息安全</tag>
      
      <tag>网络安全</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/24/hello-world/"/>
    <url>/2024/05/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>! 这是您的第一个帖子。更多信息请查看<a href="https://hexo.io/docs/">文档</a>。如果您在使用 Hexo 时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a>中找到答案，也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上询问我。</p><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><h3 id="创建新职位"><a href="#创建新职位" class="headerlink" title="创建新职位"></a>创建新职位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
